########################################################################################
# # テストの場
########################################################################################

# # npでシード値を固定
# import numpy as np

# np.random.seed(42)
# print(np.random.randn(50))

# # Output:
# # [ 0.49671415 -0.1382643   0.64768854  1.52302986 -0.23415337 -0.23413696
# #   1.57921282  0.76743473 -0.46947439  0.54256004 -0.46341769 -0.46572975
# #   0.24196227 -1.91328024 -1.72491783 -0.56228753 -1.01283112  0.31424733
# #  -0.90802408 -1.4123037   1.46564877 -0.2257763   0.0675282  -1.42474819
# #  -0.54438272  0.11092259 -1.15099358  0.37569802 -0.60063869 -0.29169375
# #  -0.60170661  1.85227818 -0.01349722 -1.05771093  0.82254491 -1.22084365
# #   0.2088636  -1.95967012 -1.32818605  0.19686124  0.73846658  0.17136828
# #  -0.11564828 -0.3011037  -1.47852199 -0.71984421 -0.46063877  1.05712223
# #   0.34361829 -1.76304016]

########################################################################################
########################################################################################

# # torchでシード値を固定
# import torch

# torch.manual_seed(42)
# print(torch.randn(50))
# # Output:
# # tensor([ 1.9269,  1.4873,  0.9007, -2.1055,  0.6784, -1.2345, -0.0431, -1.6047,
#         # -0.7521,  1.6487, -0.3925, -1.4036, -0.7279, -0.5594, -0.7688,  0.7624,
#         #  1.6423, -0.1596, -0.4974,  0.4396, -0.7581,  1.0783,  0.8008,  1.6806,
#         #  1.2791,  1.2964,  0.6105,  1.3347, -0.2316,  0.0418, -0.2516,  0.8599,
#         # -1.3847, -0.8712,  0.0780,  0.5258, -0.4880,  1.1914, -0.8140, -0.7360,
#         # -0.8371, -0.9224, -0.0635,  0.6756, -0.0978,  1.8446, -1.1845,  1.3835,
#         # -1.2024,  0.7078])

########################################################################################
########################################################################################

# # torch.cuda.is_available()でGPUが使えるかどうかを確認
# # のちtorch.cudaでシード値を固定
# import torch

# # device = 'cuda' if torch.cuda.is_available() else 'cpu'
# # print(device) # cuda
# torch.cuda.manual_seed(42)
# print(torch.randn(50))

# # Output:
# # tensor([-0.3437,  1.1007, -0.6848,  0.3010,  1.5958,  0.1479,  0.3537,  0.5756,
# #          1.7923, -0.7464,  0.6917,  0.0380,  1.1942, -0.6431,  1.5771,  0.1824,
# #         -0.3305,  0.3498,  1.7043,  0.7250,  0.9829,  0.8444, -2.0589, -0.5369,
# #         -0.0958, -0.1968,  0.7147, -0.1475,  1.4572,  0.6999, -0.2858, -1.0988,
# #          0.6624, -0.1950, -0.5137,  0.7747, -0.9383,  1.3739,  0.8558,  2.1806,
# #          1.3255,  0.3248,  0.9068,  0.2540,  1.5264, -2.3178, -1.1619, -0.8239,
# #         -0.1093, -0.7450])

########################################################################################
########################################################################################

# # ランダムな整数値をシード値として設定し、そのシードを使ってある関数を計算する場合、以下のようなロジックを考えます。
# # ロジック
# # 1. numpy.random を使ってランダムな整数値を生成（例えば np.random.randint() を使用）。
# # 2. その整数をシード値として np.random.seed() に設定。
# # 3. 設定したシード値のもとで関数を計算する。

# import numpy as np

# # 1. 乱数生成用のシードを設定（固定する場合）
# np.random.seed(42)

# # 2.0 乱数生成の回数
# ite = 5

# # 2. ランダムな整数をシード値として取得
# random_seed = np.random.randint(0, 10000, ite)  # 例えば 0 〜 9999 の間の整数をite個生成
# print("使用するシード値:\n", random_seed)

# for seed in np.nditer(random_seed):
#   # 3. 取得した乱数を新しいシード値として設定
#   np.random.seed(seed)

#   # 4. 乱数を使った計算（例: 標準正規分布の乱数行列を生成）
#   random_array = np.random.randn(2, 3)

#   print(f"使用したシード値: {seed}")
#   print("生成された乱数行列:\n", random_array)

########################################################################################
########################################################################################

import numpy as np

# 2次元配列を作成
array_2d = np.array([[1, 2], [3, 4]])

# 新しい次元を追加して3次元配列に変換
array_3d = array_2d[:, :, np.newaxis]

print(array_3d) # [[[1]
                 #   [2]]

                 #  [[3]
                 #   [4]]]
print(array_3d.shape) # (2, 2, 1) 